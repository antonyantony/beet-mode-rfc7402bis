



IPSECME Working Group                                       R. Moskowitz
Internet-Draft                                            HTT Consulting
Intended status: Standards Track                           17 March 2025
Expires: 18 September 2025


             A Bound End-to-End Tunnel (BEET) mode for ESP
            draft-moskowitz-ipsecme-beet-mode-rfc7402bis-00

Abstract

   [AA we need abstract for RFC7402bis]

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 18 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.








Moskowitz               Expires 18 September 2025               [Page 1]

Internet-Draft              BEET mode for ESP                 March 2025


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   2
   2.  Protocol Definition . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Changes to Security Association data structure  . . . . .   2
     2.2.  Packet Format . . . . . . . . . . . . . . . . . . . . . .   3
     2.3.  Inner IPv4 Datagram . . . . . . . . . . . . . . . . . . .   3
     2.4.  Inner IPv6 Datagram . . . . . . . . . . . . . . . . . . .   4
   3.  Cryptographic Processing  . . . . . . . . . . . . . . . . . .   5
   4.  IP Header Processing  . . . . . . . . . . . . . . . . . . . .   5
   5.  Handling of Outgoing Packets  . . . . . . . . . . . . . . . .   6
   6.  Handling of Incoming Packets  . . . . . . . . . . . . . . . .   7
   7.  Handling of IPv4 Options  . . . . . . . . . . . . . . . . . .   7
   8.  Policy Considerations . . . . . . . . . . . . . . . . . . . .   8
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .   9
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10
   11. Implementation Status . . . . . . . . . . . . . . . . . . . .  10
   12. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  10
   13. Normative References  . . . . . . . . . . . . . . . . . . . .  10
   14. Informative References  . . . . . . . . . . . . . . . . . . .  11
   Appendix A.  Additional Stuff . . . . . . . . . . . . . . . . . .  11
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   TBD

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Protocol Definition

   In this section we define the exact protocol formats and operations.
   This section is normative.

2.1.  Changes to Security Association data structure

   A BEET mode Security Association contains the same data as a regular
   tunnel mode Security Association, with the exception that the inner
   selectors must be single addresses and cannot be subnets.  The data
   includes the following:

   *  A pair of inner IP addresses.




Moskowitz               Expires 18 September 2025               [Page 2]

Internet-Draft              BEET mode for ESP                 March 2025


   *  A pair of outer IP addresses.

   *  Cryptographic keys and other data as defined in [RFC4301]
      Section 4.4.2.

   A conforming implementation MAY store the data in a way similar to a
   regular tunnel mode Security Association.

   Note that in a conforming implementation, the inner and outer
   addresses MAY belong to different address families.  All
   implementations that support both IPv4 and IPv6 SHOULD support both
   IPv4-over-IPv6 and IPv6-over-IPv4 tunneling.

2.2.  Packet Format

   The wire packet format is identical to the ESP transport mode wire
   format as defined in Section 3.1.1 of [RFC4303].  However, the
   resulting packet contains outer IP addresses instead of the inner IP
   addresses received from the upper layer.  The construction of the
   outer headers is defined in Section 5.1.2 of [RFC4301].  The
   following diagram illustrates ESP BEET mode positioning for typical
   IPv4 and IPv6 packets.

2.3.  Inner IPv4 Datagram

   +-----------------------------+
   | inner IP hdr  | TCP | Data  |
   +-----------------------------+

             Figure 1: IPv4 INNER DATAGRAM BEFORE APPLYING ESP

   +--------------------------------------------------+
   | outer IP hdr  |     |     |      |   ESP   | ESP |
   | (any options) | ESP | TCP | Data | Trailer | ICV |
   +--------------------------------------------------+
                         |<---- encryption ---->|
                   |<-------- integrity ------->|

              Figure 2: AFTER APPLYING ESP, OUTER v4 ADDRESSES

   +------------------------------------------------------+
   | outer    | new ext |     |     |      |  ESP   | ESP |
   | IPv6 hdr | hdrs    | ESP | TCP | Data | Trailer| ICV |
   +------------------------------------------------------+
                              |<--- encryption ---->|
                        |<------ integrity -------->|

              Figure 3: AFTER APPLYING ESP, OUTER v6 ADDRESSES



Moskowitz               Expires 18 September 2025               [Page 3]

Internet-Draft              BEET mode for ESP                 March 2025


   +----------------------------+
   | inner IP hdr  |     |      |
   |  + options    | TCP | Data |
   +----------------------------+

     Figure 4: IPv4 INNER DATAGRAM with IP options BEFORE APPLYING ESP

   +-------------------------------------------------------+
   | outer IP hdr  |     |    |     |      |   ESP   | ESP |
   | (any options) | ESP | PH | TCP | Data | Trailer | ICV |
   +-------------------------------------------------------+
                         |<----- encryption -------->|
                   |<----------- integrity --------->|
                       PH = BEET mode Pseudo-Header

      Figure 5: IPv4 AFTER APPLYING ESP, OUTER v4 ADDRESSES INNER IPv4
                                  OPTIONS

   +---------------------------------------------------------------+
   | outer  | new ext |     | PH       |     |      |  ESP   | ESP |
   | IP hdr | hdrs.   | ESP | Options  | TCP | Data | Trailer| ICV |
   +---------------------------------------------------------------+
                            |<------ encryption ------------>|
                      |<---------- integrity --------------->|

                              PH = BEET mode Pseudo-Header

     Figure 6: IPv4 + OPTIONS AFTER APPLYING ESP, OUTER IPv6 ADDRESSES

2.4.  Inner IPv6 Datagram

   +--------------------------------------+
   |                |  ext   |     |      |
   | inner IPv6 hdr |  hdrs  | TCP | Data |
   +--------------------------------------r+-

                Figure 7: IPv6 DATAGRAM BEFORE APPLYING ESP

   +--------------------------------------------------------------+
   | outer    | new ext |     | ext  |     |      |  ESP    | ESP |
   | IPv6 hdr | hdrs.   | ESP | hdrs | TCP | Data | Trailer | ICV |
   +--------------------------------------------------------------+
                              |<-------- encryption ------------->|
                        |<-------------- integrity -------------->|

      Figure 8: IPv6 DATAGRAM AFTER APPLYING ESP, OUTER IPv6 ADDRESSES





Moskowitz               Expires 18 September 2025               [Page 4]

Internet-Draft              BEET mode for ESP                 March 2025


   ---------------------------------------------------
   | outer  |     | ext  |     |      |  ESP    | ESP |
   | IP hdr | ESP | hdrs.| TCP | Data | Trailer | ICV |
   ---------------------------------------------------
                  |<------- encryption -------->|
            |<----------- integrity ----------->|

      Figure 9: IPv6 DATAGRAM AFTER APPLYING ESP, OUTER IPv4 ADDRESSES

3.  Cryptographic Processing

   The outgoing packets MUST be protected exactly as in ESP transport
   mode [RFC4303].  That is, the upper layer protocol packet is wrapped
   into an ESP header, encrypted, and authenticated exactly as if
   regular transport mode was used.  The resulting ESP packet is subject
   to IP header processing as defined in Section 4 and Section 5.  The
   incoming ESP protected messages are verified and decrypted exactly as
   if regular transport mode was used.  The resulting cleartext packet
   is subject to IP header processing as defined in Section 4 and
   Section 6

4.  IP Header Processing

   The biggest difference between BEET mode and the other two modes is
   in IP header processing.  In the regular transport mode, the IP
   header is kept intact.  In the regular tunnel mode, an outer IP
   header is created on output and discarded on input.  In BEET mode,
   the IP header is replaced with another one on both input and output.

   On the BEET mode output side, the IP header processing MUST first
   ensure that the IP addresses in the original IP header contain the
   inner addresses as specified in the SA.  This MAY be ensured by
   proper policy processing, and it is possible that no checks are
   needed at the time of SA processing.  Once the IP header has been
   verified to contain the right IP inner addresses, it is discarded.  A
   new IP header is created, using the fields of the discarded inner
   header (except the IP addresses) to populate the fields of the new
   outer header.  The IP addresses in the new header MUST be the outer
   tunnel addresses.

   On the input side, the received IP header is simply discarded.  Since
   the packet has been decrypted and verified, no further checks are
   necessary.  A new IP header corresponding to a BEET mode inner header
   is created, using the fields of the discarded outer header (except
   the IP addresses) to populate the fields of the new inner header.
   The IP addresses in the new header MUST be the inner addresses.





Moskowitz               Expires 18 September 2025               [Page 5]

Internet-Draft              BEET mode for ESP                 March 2025


   As the outer header fields are used as a hint for creating the inner
   header, it must be noted that the inner header differs as compared to
   a tunnel mode inner header.  In BEET mode, the inner header will have
   the Time to Live (TTL), Don't Fragment (DF) bit, and other option
   values from the outer header.  The TTL, DF bit, and other option
   values of the inner header MUST be processed by the stack.

5.  Handling of Outgoing Packets

   The outgoing BEET mode packets are processed as follows:

   *  The system MUST verify that the IP header contains the inner
      source and destination addresses, exactly as defined in the SA.
      This verification MAY be explicit, or it MAY be implicit, for
      example, as a result of prior policy processing.  Note that in
      some implementations there may be no real IP header at this time
      but the source and destination addresses may be carried out of
      band.  If the source address is still unassigned, it SHOULD be
      ensured that the designated inner source address would be selected
      at a later stage.

   *  The IP payload (the contents of the packet beyond the IP header)
      is wrapped into an ESP header as defined in Section 3.3 of
      [RFC4303].

   *  A new IP header is constructed, replacing the original one.  The
      new IP header MUST contain the outer source and destination
      addresses, as defined in the SA.  Note that in some
      implementations there may be no real IP header at this time but
      the source and destination addresses may be carried out of band.
      In the case where the source address must be left unassigned, it
      SHOULD be ensured that the right source address is selected at a
      later stage.  Other than the addresses, it is RECOMMENDED that the
      new IP header copies the fields from the original IP header.

   *  If there are any IPv4 options in the original packet, it is
      RECOMMENDED that they are discarded.  If the inner header contains
      one or more options that need to be transported between the tunnel
      endpoints, the sender MUST encapsulate the options as defined [AA
      fix the section reference] Section 7.

   Instead of literally discarding the IP header and constructing a new
   one, a conforming implementation MAY simply replace the addresses in
   an existing header.  However, if the RECOMMENDED feature of allowing
   the inner and outer addresses from different address families is
   used, this simple strategy does not work.





Moskowitz               Expires 18 September 2025               [Page 6]

Internet-Draft              BEET mode for ESP                 March 2025


6.  Handling of Incoming Packets

   The incoming BEET mode packets are processed as follows:

   *  The system MUST verify and decrypt the incoming packet
      successfully, as defined in Section 3.4 of [RFC4303].  If the
      verification or decryption fails, the packet MUST be discarded.

   *  The original IP header is simply discarded, without any checks.
      Since the ESP verification succeeded, the packet can be safely
      assumed to have arrived from the right sender.

   *  A new IP header is constructed, replacing the original one.  The
      new IP header MUST contain the inner source and destination
      addresses, as defined in the SA.  If the sender has set the ESP
      Next Header field to 94 and included the pseudo header as
      described in Section 7, the receiver MUST include the options
      after the constructed IP header.  Note that in some
      implementations the real IP header may have already been discarded
      and the source and destination addresses are carried out of band.
      In such a case, the out-of-band addresses MUST be he inner
      addresses.  Other than the addresses, it is RECOMMENDED that the
      new IP header copies the fields from the original IP header.  [AA
      how about ESP in UDP and mapping changes?]

   Instead of literally discarding the IP header and constructing a new
   one, a conforming implementation MAY simply replace the addresses in
   an existing header.  However, if the RECOMMENDED feature of allowing
   the inner and outer addresses from different address families is
   used, this simple strategy does not work.

7.  Handling of IPv4 Options

   In BEET mode, if IPv4 options are transported inside the tunnel, the
   sender MUST include a pseudo header after the ESP header.  The pseudo
   header indicates that IPv4 options from the original packet are to be
   applied to the packet on the input side.














Moskowitz               Expires 18 September 2025               [Page 7]

Internet-Draft              BEET mode for ESP                 March 2025


   The sender MUST set the Next Header field in the ESP header to 94.
   The resulting pseudo header, including the IPv4 options, MUST be
   padded to an 8-octet boundary.  The padding length is expressed in
   octets; valid padding lengths are 0 or 4 octets, as the original IPv4
   options are already padded to a 4-octet boundary.  The padding MUST
   be filled with No Operation (NOP) options as defined in Section 3.1
   ("Internet Header Format") of [RFC791] ("Internet Protocol").  The
   padding is added in front of the original options to ensure that the
   receiver is able to reconstruct the original IPv4 datagram.  The
   Header Length field contains the length of the IPv4 options, and
   padding in 8-octet units.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Header  |   Header Len  |    Pad Len    |       Reserved|
   +---------------+---------------+-------------------------------+
   |              Padding (if needed)                              |
   +-----------------------------------------+---------------------+
   |                     IPv4 options ...                          |
   |                                                               |
   +---------------------------------------------------------------+

                 Figure 10: BEET mode pseudo header format

   *  Next Header - identifies the data following this header.

   *  Length in octets - 8-bit unsigned integer.  Length of the pseudo
      header in 8-octet units, not including the first 8 octets.

   The receiver MUST remove this pseudo header and padding as a part of
   BEET processing, in order to reconstruct the original IPv4 datagram.
   The IPv4 options included in the pseudo header MUST be added after
   the reconstructed IPv4 (inner) header on the receiving side.

   [AA NOTE: Note: when the IPv4 options are present, the outer header's
   IHL would be different from the inner header IHL NEXT paragraph is
   extra???]

   The receiver MUST remove this pseudo-header and padding as a part of
   BEET processing, in order reconstruct the original IPv4 datagram.
   The IPv4 options included into the pseudo-header MUST be added after
   the reconstructed IPv4 (inner) header on the receiving side.

8.  Policy Considerations

   In this section we describe how BEET mode affects on IPsec policy
   processing.  This section is normative.



Moskowitz               Expires 18 September 2025               [Page 8]

Internet-Draft              BEET mode for ESP                 March 2025


   A BEET Security Association SHOULD NOT be used with NULL
   authentication.

   On the output side, the IPsec policy processing mechanism SHOULD take
   care that only packets with IP addresses matching the inner addresses
   of a Security Association are passed on to that Security Association.
   If the policy mechanism does not provide full assurance on this
   point, the SA processing MUST check the addresses.  Further policy
   distinction may be specified based on IP version, upper layer
   protocol, and ports.  If such restrictions are defined, they MUST be
   enforced.

   On the output side, the policy rules SHOULD prevent any packets
   containing the pair of inner IP addresses from escaping to the wire
   in cleartext.

   On the input side,no policy processing is necessary for encrypted
   packets.  The SA is deduced from the SPI and destination address.  A
   single SA MAY be associated with several outter destination
   addresses.  Since the outer IPsec addresses are discarded, and since
   the packet authenticity and integrity are protected by ESP, there is
   no need to check the outer addresses.  Since the inner addresses are
   fixed and restored from the SA, there is no need to check them.
   There MAY be further policy rules specifying allowed upper layer
   protocols and ports.  If such restrictions are defined, they MUST be
   enforced.

   On the input side, there SHOULD be a policy rule that filters out
   cleartext packets that contain the inner addresses.

9.  Security Considerations

   In this document, the usage of ESP [RFC4303] between hosts to protect
   data traffic is introduced.  The security considerations for ESP are
   discussed in the ESP specification.

   In this section we discuss the security properties of the BEET mode,
   discussing some and point out some of its limitations [RFC3552].

   There are no known new vulnerabilities that the introduction of the
   BEET mode would create.

   Because in BEET mode the outer header source address is not checked
   at the time of input handling, there is a potential for a DoS attack
   where the attacker would send random packets that match the SPI of
   some BEET-mode SA.  This kind of attack would cause the victim to
   perform unnecessary integrity checks that would result in a failure.
   However, if this kind of behavior is detected, the node may request



Moskowitz               Expires 18 September 2025               [Page 9]

Internet-Draft              BEET mode for ESP                 March 2025


   rekeying using IKEv2 rekey, and after rekeying.  If the attacker was
   not on the path, the new SPI value would not be known by the
   attacker.

10.  IANA Considerations

   TBD

11.  Implementation Status

   [Note to RFC Editor: Please remove this section and the reference to
   [RFC6982] before publication.]

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC7942].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [RFC7942], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

   Authors are requested to add a note to the RFC Editor at the top of
   this section, advising the Editor to remove the entire section before
   publication, as well as the reference to [RFC7942].

12.  Acknowledgments

   TBD

13.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.




Moskowitz               Expires 18 September 2025              [Page 10]

Internet-Draft              BEET mode for ESP                 March 2025


   [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
              Internet Protocol", RFC 4301, DOI 10.17487/RFC4301,
              December 2005, <https://www.rfc-editor.org/info/rfc4301>.

   [RFC4303]  Kent, S., "IP Encapsulating Security Payload (ESP)",
              RFC 4303, DOI 10.17487/RFC4303, December 2005,
              <https://www.rfc-editor.org/info/rfc4303>.

   [RFC791]   Postel, J., "Internet Protocol", STD 5, RFC 791,
              DOI 10.17487/RFC0791, September 1981,
              <https://www.rfc-editor.org/info/rfc791>.

14.  Informative References

   [RFC3552]  Rescorla, E. and B. Korver, "Guidelines for Writing RFC
              Text on Security Considerations", BCP 72, RFC 3552,
              DOI 10.17487/RFC3552, July 2003,
              <https://www.rfc-editor.org/info/rfc3552>.

   [RFC6982]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", RFC 6982,
              DOI 10.17487/RFC6982, July 2013,
              <https://www.rfc-editor.org/info/rfc6982>.

   [RFC7402]  Jokela, P., Moskowitz, R., and J. Melen, "Using the
              Encapsulating Security Payload (ESP) Transport Format with
              the Host Identity Protocol (HIP)", RFC 7402,
              DOI 10.17487/RFC7402, April 2015,
              <https://www.rfc-editor.org/info/rfc7402>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/info/rfc7942>.

Appendix A.  Additional Stuff

   This becomes an Appendix.

Author's Address

   Robert Moskowitz
   HTT Consulting
   Email: rgm@labs.htt-consult.com







Moskowitz               Expires 18 September 2025              [Page 11]
